
parser
   fsm1 = a; //The attribute should be "RS". We can't distinguish terminals from nonterminals here.
   fsm2 = a [read read read read]; //The attribute should still be "RS". Superfluous attributes don't matter.
   fsm3 = a [read stack node keep]; //The attribute should be "RSNK". The keep attributes is superfluous for a parser.
   fsm4 = a [read stack node noKeep]; //The attribute should be "RSN". 
   fsm5 = a [read stack node look]; //The attribute should be "L" or "".
   fsm6 = a [noStack keep]; //The attribute should be "RK".
   fsm7 = A; //We hacked the grammar to say that this is a nonterminal...
   fsm8 = fsm1 [noStack keep]; 
	//The attribute for fsm1 should still be "RS". You'll
	//need to inspect fsm1 to verify this.

   fsm9 = a [node]; //The attribute should be "RSN".
   fsm10 = fsm9 [noNode]; //The attribute should be "RS" but fsm1 should still be "RSN".
   fsm11 = {fsm9}; //Braces mean LOOK. The attribute should be "LSN", "SN", or ""; i.e. NOT R.


   //The following FSMs should all be ROOT BUILDING semantic actions; i.e. TREE BUILDING
   //because of the existing of "=>" in front of it...
   //Also, note that ACTION parameters should be characters, integers, or strings depending
   //on whether their labels are #walkCharacter: #walkInteger:, or #walkString:.

   fsm12 = => "list";   //This one should create semantic transition #buildTree: with parameters containing STRING "list" (NOT A TOKEN).
   fsm13 = => + 1;   //This one should create semantic transition #buildTreeFromIndex: with parameters containing integer 1.
   fsm14 = => 1;   //This one should create semantic transition #buildTreeFromIndex: with parameters containing integer 1 TOO.
   fsm15 = => -1;   //This one should create semantic transition #buildTreeFromIndex: with parameters containing integer -1.
   fsm16 = => #buildRoutine:with: [1 2];  //This one should create semantic transition #buildRoutine:with: with parameters containing integers 1 and 2.
   fsm17 = => #between:and: [10 20];  //This one should create semantic transition #between:and: with parameters containing integers 10 and 20.
   fsm16 = => #testing;  //This one should create semantic transition #testing with parameters consisting of an empty collection.
   fsm17 = => #myBuildTree ["list"];  //This one should look just like fsm10 except for my...

   //The following FSMs should all be NON-ROOT BUILDING semantic actions because "=>" is missing

   fsm18 = #normal1:and: [10 20];  //Like the above but NOT tree building...
   fsm19 = #normal2;  //Like the above but NOT tree building...
   fsm20 = #normal3: ["list"];  //Like the above but NOT tree building...
	